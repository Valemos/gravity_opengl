#ifndef INTERFACE_DRAWABLE
#define INTERFACE_DRAWABLE

class Renderer;

#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

class Drawable
{
	
protected:
	// ids generated by opengl
	unsigned int vertexBufferId = 0;
	unsigned int vertexArrayId = 0;
	int vertexAttributePointersId = 0;

	float* figureVertexBuffer = nullptr;
	int vertexBufferSize = 0;
	
	// for more complicated figures to reuse points from VBO
	int* figureArrayBuffer = nullptr;
	int vertexArraySize = 0;
	
public:
	virtual ~Drawable();
	virtual void updateGlBuffer() = 0;
	virtual void draw(const Renderer& renderer) = 0;
};

inline Drawable::~Drawable()
{
	if (figureVertexBuffer != nullptr)
	{
		delete[] figureVertexBuffer;
	}

	if (figureArrayBuffer != nullptr)
	{
		delete[] figureArrayBuffer;
	}
}

#endif // !INTERFACE_DRAWABLE


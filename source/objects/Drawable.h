#ifndef INTERFACE_DRAWABLE
#define INTERFACE_DRAWABLE

class Renderer;

class Drawable
{
	
protected:
	// ids generated by opengl
	unsigned int vertexBufferId = 0;

	float* vertexBuffer = nullptr;
	int vertexBufferSize = 0;
	
	// for more complicated figures to reuse points from VBO
	int* indexBuffer = nullptr;
	int vertexIndexSize = 0;
	
public:
	virtual ~Drawable();

	// we must call this function once to draw objects
	// before all draw calls
	// loads all necessary data to graphics card
	virtual void updateGlBuffer() = 0;
	virtual void draw(const Renderer& renderer) = 0;
};

inline Drawable::~Drawable()
{
	if (vertexBuffer != nullptr)
	{
		delete[] vertexBuffer;
	}

	if (indexBuffer != nullptr)
	{
		delete[] indexBuffer;
	}
}

#endif // !INTERFACE_DRAWABLE

